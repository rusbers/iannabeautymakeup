/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type InteriorPageHero = {
  _type: "interiorPageHero";
  title?: string;
  richSubtitle?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: null;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  richText?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: "bullet";
    markDefs?: null;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    imageDescription?: string;
    _type: "image";
  };
};

export type ImageGridGallery = {
  _type: "imageGridGallery";
  title?: string;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    imageDescription?: string;
    _type: "image";
    _key: string;
  }>;
  link?: string;
};

export type Testimonials = {
  _type: "testimonials";
  title?: string;
  richSubtitle?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: null;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  testimonials?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "testimonial";
  }>;
  buttons?: Array<{
    _key: string;
  } & Button>;
};

export type PriceList = {
  _type: "priceList";
  title?: string;
  richSubtitle?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: null;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  prices?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "price";
  }>;
  buttons?: Array<{
    _key: string;
  } & Button>;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    imageDescription?: string;
    _type: "image";
  };
};

export type AboutMe = {
  _type: "aboutMe";
  title?: string;
  richSubtitle?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: null;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  richText?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: "bullet";
    markDefs?: null;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  buttons?: Array<{
    _key: string;
  } & Button>;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    imageDescription?: string;
    _type: "image";
  };
};

export type FeaturedServicesWithIcon = {
  _type: "featuredServicesWithIcon";
  title?: string;
  items?: Array<{
    svgIcon?: string;
    title?: string;
    description?: string;
    buttons?: Array<{
      _key: string;
    } & Button>;
    _type: "serviceLinkItem";
    _key: string;
  }>;
};

export type Hero = {
  _type: "hero";
  richHeroTitle?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: null;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  richText?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: "bullet";
    markDefs?: null;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  icon?: IconPicker;
  services?: Array<string>;
  buttons?: Array<{
    _key: string;
  } & Button>;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    imageDescription?: string;
    _type: "image";
  };
};

export type RichSubtitle = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal";
  listItem?: never;
  markDefs?: null;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type RichText = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal";
  listItem?: "bullet";
  markDefs?: null;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type RichHeroTitle = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal";
  listItem?: never;
  markDefs?: null;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type Button = {
  _type: "button";
  variant?: "default" | "secondary" | "link";
  text?: string;
  url?: CustomUrl;
};

export type CustomUrl = {
  _type: "customUrl";
  type?: "internal" | "external";
  openInNewTab?: boolean;
  external?: string;
  href?: string;
  internal?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  };
};

export type IdEntry = {
  _id: string;
  _type: "idEntry";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  idItem?: string;
};

export type SocialMedia = {
  _id: string;
  _type: "socialMedia";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  icon?: IconPicker;
  name?: string;
  url?: string;
  label?: Array<{
    _key: string;
  } & InternationalizedArrayStringValue>;
};

export type Settings = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  tagline?: Array<{
    _key: string;
  } & InternationalizedArrayStringValue>;
  socialMediaLinks?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "socialMedia";
  }>;
};

export type Price = {
  _id: string;
  _type: "price";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  category?: string;
  services?: Array<{
    name?: string;
    price?: string;
    touchUps?: Array<{
      timeframe?: string;
      price?: string;
      _key: string;
    }>;
    _key: string;
  }>;
};

export type InlineSvg = string;

export type IconPicker = {
  _type: "iconPicker";
  provider?: string;
  name?: string;
  svg?: string;
};

export type Code = {
  _type: "code";
  language?: string;
  filename?: string;
  code?: string;
  highlightedLines?: Array<number>;
};

export type SanityAssistInstructionTask = {
  _type: "sanity.assist.instructionTask";
  path?: string;
  instructionKey?: string;
  started?: string;
  updated?: string;
  info?: string;
};

export type SanityAssistTaskStatus = {
  _type: "sanity.assist.task.status";
  tasks?: Array<{
    _key: string;
  } & SanityAssistInstructionTask>;
};

export type SanityAssistSchemaTypeAnnotations = {
  _type: "sanity.assist.schemaType.annotations";
  title?: string;
  fields?: Array<{
    _key: string;
  } & SanityAssistSchemaTypeField>;
};

export type SanityAssistOutputType = {
  _type: "sanity.assist.output.type";
  type?: string;
};

export type SanityAssistOutputField = {
  _type: "sanity.assist.output.field";
  path?: string;
};

export type SanityAssistInstructionContext = {
  _type: "sanity.assist.instruction.context";
  reference?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "assist.instruction.context";
  };
};

export type AssistInstructionContext = {
  _id: string;
  _type: "assist.instruction.context";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  context?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: null;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type SanityAssistInstructionUserInput = {
  _type: "sanity.assist.instruction.userInput";
  message?: string;
  description?: string;
};

export type SanityAssistInstructionPrompt = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  } | {
    _key: string;
  } & SanityAssistInstructionFieldRef | {
    _key: string;
  } & SanityAssistInstructionContext | {
    _key: string;
  } & SanityAssistInstructionUserInput>;
  style?: "normal";
  listItem?: never;
  markDefs?: null;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type SanityAssistInstructionFieldRef = {
  _type: "sanity.assist.instruction.fieldRef";
  path?: string;
};

export type SanityAssistInstruction = {
  _type: "sanity.assist.instruction";
  prompt?: SanityAssistInstructionPrompt;
  icon?: string;
  title?: string;
  userId?: string;
  createdById?: string;
  output?: Array<{
    _key: string;
  } & SanityAssistOutputField | {
    _key: string;
  } & SanityAssistOutputType>;
};

export type SanityAssistSchemaTypeField = {
  _type: "sanity.assist.schemaType.field";
  path?: string;
  instructions?: Array<{
    _key: string;
  } & SanityAssistInstruction>;
};

export type InternationalizedArrayStringValue = {
  _type: "internationalizedArrayStringValue";
  value?: string;
};

export type InternationalizedArrayString = Array<{
  _key: string;
} & InternationalizedArrayStringValue>;

export type TranslationMetadata = {
  _id: string;
  _type: "translation.metadata";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  translations?: Array<{
    _key: string;
  } & InternationalizedArrayReferenceValue>;
  schemaTypes?: Array<string>;
};

export type InternationalizedArrayReferenceValue = {
  _type: "internationalizedArrayReferenceValue";
  value?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "testimonial";
  };
};

export type Testimonial = {
  _id: string;
  _type: "testimonial";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  language?: "en" | "ro";
  username?: string;
  richText?: RichText;
  orderRank?: string;
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  language?: "en" | "ro";
  title?: string;
  slug?: Slug;
  blocks?: Array<{
    _key: string;
  } & Hero | {
    _key: string;
  } & FeaturedServicesWithIcon | {
    _key: string;
  } & AboutMe | {
    _key: string;
  } & ImageGridGallery | {
    _key: string;
  } & PriceList | {
    _key: string;
  } & Testimonials | {
    _key: string;
  } & InteriorPageHero>;
  meta_title?: string;
  meta_description?: string;
  noindex?: boolean;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  orderRank?: string;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type InternationalizedArrayReference = Array<{
  _key: string;
} & InternationalizedArrayReferenceValue>;

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | InteriorPageHero | ImageGridGallery | Testimonials | PriceList | AboutMe | FeaturedServicesWithIcon | Hero | RichSubtitle | RichText | RichHeroTitle | Button | CustomUrl | IdEntry | SocialMedia | Settings | Price | InlineSvg | IconPicker | Code | SanityAssistInstructionTask | SanityAssistTaskStatus | SanityAssistSchemaTypeAnnotations | SanityAssistOutputType | SanityAssistOutputField | SanityAssistInstructionContext | AssistInstructionContext | SanityAssistInstructionUserInput | SanityAssistInstructionPrompt | SanityAssistInstructionFieldRef | SanityAssistInstruction | SanityAssistSchemaTypeField | InternationalizedArrayStringValue | InternationalizedArrayString | TranslationMetadata | InternationalizedArrayReferenceValue | Testimonial | Page | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Slug | InternationalizedArrayReference;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./app/sitemap.ts
// Variable: pagesQuery
// Query: *[_type == 'page'] | order(slug.current) {      slug,      _updatedAt    }
export type PagesQueryResult = Array<{
  slug: Slug | null;
  _updatedAt: string;
}>;

// Source: ./sanity/queries/footer.ts
// Variable: queryFooterData
// Query: *[_type == "settings" && _id == "settings"][0]{    "tagline": tagline[_key == $language][0].value,    socialMediaLinks[]->{      _id,      name,      url,      "icon": icon.svg,      "label": label[_key == $language][0].value,    }  }
export type QueryFooterDataResult = {
  tagline: string | null;
  socialMediaLinks: Array<{
    _id: string;
    name: string | null;
    url: string | null;
    icon: string | null;
    label: string | null;
  }> | null;
} | null;

// Source: ./sanity/queries/page.ts
// Variable: PAGE_QUERY
// Query: *[_type == "page" && slug.current == $slug && language == $language][0]{    blocks[]{        _type == "hero" => {    _type,    _key,    richHeroTitle,    richText,    icon,    services,      buttons[]{    text,    variant,    _key,    _type,    "openInNewTab": url.openInNewTab,    "anchor": url.anchor->idItem,    "href": select(      url.type == "internal" => url.internal->slug.current,      url.type == "external" => url.external,      url.href    ),  },      image{    ...,    "alt": imageDescription,    "blurData": asset->metadata.lqip,    "dominantColor": asset->metadata.palette.dominant.background,  },  },        _type == "featuredServicesWithIcon" => {    _type,    _key,    title,    items[]{      _type,      _key,      title,      svgIcon,      description,        buttons[]{    text,    variant,    _key,    _type,    "openInNewTab": url.openInNewTab,    "anchor": url.anchor->idItem,    "href": select(      url.type == "internal" => url.internal->slug.current,      url.type == "external" => url.external,      url.href    ),  },    }  },        _type == "aboutMe" => {    _type,    _key,    title,    richSubtitle,    richText,      buttons[]{    text,    variant,    _key,    _type,    "openInNewTab": url.openInNewTab,    "anchor": url.anchor->idItem,    "href": select(      url.type == "internal" => url.internal->slug.current,      url.type == "external" => url.external,      url.href    ),  },      image{    ...,    "alt": imageDescription,    "blurData": asset->metadata.lqip,    "dominantColor": asset->metadata.palette.dominant.background,  },  },        _type == "imageGridGallery" => {    _type,    _key,    title,      images[]{    "image": {      ...,      "alt": imageDescription,      "blurData": asset->metadata.lqip,      "dominantColor": asset->metadata.palette.dominant.background,    },  },    link,  },        _type == "priceList" => {    _type,    _key,    title,    richSubtitle,    prices[]->{      _id,      category,      services[]{        name,        price,      }    },      buttons[]{    text,    variant,    _key,    _type,    "openInNewTab": url.openInNewTab,    "anchor": url.anchor->idItem,    "href": select(      url.type == "internal" => url.internal->slug.current,      url.type == "external" => url.external,      url.href    ),  },      image{    ...,    "alt": imageDescription,    "blurData": asset->metadata.lqip,    "dominantColor": asset->metadata.palette.dominant.background,  },  },        _type == "testimonials" => {    _type,    _key,    title,    richSubtitle,    testimonials[]->{      username,      richText,    },      buttons[]{    text,    variant,    _key,    _type,    "openInNewTab": url.openInNewTab,    "anchor": url.anchor->idItem,    "href": select(      url.type == "internal" => url.internal->slug.current,      url.type == "external" => url.external,      url.href    ),  },  },        _type == "interiorPageHero" => {    _type,    _key,    title,    richSubtitle,    richText,      image{    ...,    "alt": imageDescription,    "blurData": asset->metadata.lqip,    "dominantColor": asset->metadata.palette.dominant.background,  },  },    },    meta_title,    meta_description,    noindex,    ogImage {      asset->{        _id,        url,        metadata {          dimensions {            width,            height          }        }      },    }  }
export type PAGE_QUERYResult = {
  blocks: Array<{
    _type: "aboutMe";
    _key: string;
    title: string | null;
    richSubtitle: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: null;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
    richText: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: "bullet";
      markDefs?: null;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
    buttons: Array<{
      text: string | null;
      variant: "default" | "link" | "secondary" | null;
      _key: string;
      _type: "button";
      openInNewTab: boolean | null;
      anchor: null;
      href: string | null;
    }> | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      imageDescription?: string;
      _type: "image";
      alt: string | null;
      blurData: string | null;
      dominantColor: string | null;
    } | null;
  } | {
    _type: "featuredServicesWithIcon";
    _key: string;
    title: string | null;
    items: Array<{
      _type: "serviceLinkItem";
      _key: string;
      title: string | null;
      svgIcon: string | null;
      description: string | null;
      buttons: Array<{
        text: string | null;
        variant: "default" | "link" | "secondary" | null;
        _key: string;
        _type: "button";
        openInNewTab: boolean | null;
        anchor: null;
        href: string | null;
      }> | null;
    }> | null;
  } | {
    _type: "hero";
    _key: string;
    richHeroTitle: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: null;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
    richText: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: "bullet";
      markDefs?: null;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
    icon: IconPicker | null;
    services: Array<string> | null;
    buttons: Array<{
      text: string | null;
      variant: "default" | "link" | "secondary" | null;
      _key: string;
      _type: "button";
      openInNewTab: boolean | null;
      anchor: null;
      href: string | null;
    }> | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      imageDescription?: string;
      _type: "image";
      alt: string | null;
      blurData: string | null;
      dominantColor: string | null;
    } | null;
  } | {
    _type: "imageGridGallery";
    _key: string;
    title: string | null;
    images: Array<{
      image: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        imageDescription?: string;
        _type: "image";
        _key: string;
        alt: string | null;
        blurData: string | null;
        dominantColor: string | null;
      };
    }> | null;
    link: string | null;
  } | {
    _type: "interiorPageHero";
    _key: string;
    title: string | null;
    richSubtitle: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: null;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
    richText: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: "bullet";
      markDefs?: null;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      imageDescription?: string;
      _type: "image";
      alt: string | null;
      blurData: string | null;
      dominantColor: string | null;
    } | null;
  } | {
    _type: "priceList";
    _key: string;
    title: string | null;
    richSubtitle: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: null;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
    prices: Array<{
      _id: string;
      category: string | null;
      services: Array<{
        name: string | null;
        price: string | null;
      }> | null;
    }> | null;
    buttons: Array<{
      text: string | null;
      variant: "default" | "link" | "secondary" | null;
      _key: string;
      _type: "button";
      openInNewTab: boolean | null;
      anchor: null;
      href: string | null;
    }> | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      imageDescription?: string;
      _type: "image";
      alt: string | null;
      blurData: string | null;
      dominantColor: string | null;
    } | null;
  } | {
    _type: "testimonials";
    _key: string;
    title: string | null;
    richSubtitle: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: null;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
    testimonials: Array<{
      username: string | null;
      richText: RichText | null;
    }> | null;
    buttons: Array<{
      text: string | null;
      variant: "default" | "link" | "secondary" | null;
      _key: string;
      _type: "button";
      openInNewTab: boolean | null;
      anchor: null;
      href: string | null;
    }> | null;
  }> | null;
  meta_title: string | null;
  meta_description: string | null;
  noindex: boolean | null;
  ogImage: {
    asset: {
      _id: string;
      url: string | null;
      metadata: {
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
  } | null;
} | null;
// Variable: PAGES_SLUGS_QUERY
// Query: *[_type == "page" && defined(slug) && language == $language]{slug}
export type PAGES_SLUGS_QUERYResult = Array<{
  slug: Slug | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n    *[_type == 'page'] | order(slug.current) {\n      slug,\n      _updatedAt\n    }\n  ": PagesQueryResult;
    "\n  *[_type == \"settings\" && _id == \"settings\"][0]{\n    \"tagline\": tagline[_key == $language][0].value,\n    socialMediaLinks[]->{\n      _id,\n      name,\n      url,\n      \"icon\": icon.svg,\n      \"label\": label[_key == $language][0].value,\n    }\n  }\n": QueryFooterDataResult;
    "\n  *[_type == \"page\" && slug.current == $slug && language == $language][0]{\n    blocks[]{\n      \n  _type == \"hero\" => {\n    _type,\n    _key,\n    richHeroTitle,\n    richText,\n    icon,\n    services,\n    \n  buttons[]{\n    text,\n    variant,\n    _key,\n    _type,\n    \"openInNewTab\": url.openInNewTab,\n    \"anchor\": url.anchor->idItem,\n    \"href\": select(\n      url.type == \"internal\" => url.internal->slug.current,\n      url.type == \"external\" => url.external,\n      url.href\n    ),\n  }\n,\n    \n  image{\n    ...,\n    \"alt\": imageDescription,\n    \"blurData\": asset->metadata.lqip,\n    \"dominantColor\": asset->metadata.palette.dominant.background,\n  }\n,\n  }\n,\n      \n  _type == \"featuredServicesWithIcon\" => {\n    _type,\n    _key,\n    title,\n    items[]{\n      _type,\n      _key,\n      title,\n      svgIcon,\n      description,\n      \n  buttons[]{\n    text,\n    variant,\n    _key,\n    _type,\n    \"openInNewTab\": url.openInNewTab,\n    \"anchor\": url.anchor->idItem,\n    \"href\": select(\n      url.type == \"internal\" => url.internal->slug.current,\n      url.type == \"external\" => url.external,\n      url.href\n    ),\n  }\n,\n    }\n  }\n,\n      \n  _type == \"aboutMe\" => {\n    _type,\n    _key,\n    title,\n    richSubtitle,\n    richText,\n    \n  buttons[]{\n    text,\n    variant,\n    _key,\n    _type,\n    \"openInNewTab\": url.openInNewTab,\n    \"anchor\": url.anchor->idItem,\n    \"href\": select(\n      url.type == \"internal\" => url.internal->slug.current,\n      url.type == \"external\" => url.external,\n      url.href\n    ),\n  }\n,\n    \n  image{\n    ...,\n    \"alt\": imageDescription,\n    \"blurData\": asset->metadata.lqip,\n    \"dominantColor\": asset->metadata.palette.dominant.background,\n  }\n,\n  }\n,\n      \n  _type == \"imageGridGallery\" => {\n    _type,\n    _key,\n    title,\n    \n  images[]{\n    \"image\": {\n      ...,\n      \"alt\": imageDescription,\n      \"blurData\": asset->metadata.lqip,\n      \"dominantColor\": asset->metadata.palette.dominant.background,\n    },\n  }\n,\n    link,\n  }\n,\n      \n  _type == \"priceList\" => {\n    _type,\n    _key,\n    title,\n    richSubtitle,\n    prices[]->{\n      _id,\n      category,\n      services[]{\n        name,\n        price,\n      }\n    },\n    \n  buttons[]{\n    text,\n    variant,\n    _key,\n    _type,\n    \"openInNewTab\": url.openInNewTab,\n    \"anchor\": url.anchor->idItem,\n    \"href\": select(\n      url.type == \"internal\" => url.internal->slug.current,\n      url.type == \"external\" => url.external,\n      url.href\n    ),\n  }\n,\n    \n  image{\n    ...,\n    \"alt\": imageDescription,\n    \"blurData\": asset->metadata.lqip,\n    \"dominantColor\": asset->metadata.palette.dominant.background,\n  }\n,\n  }\n,\n      \n  _type == \"testimonials\" => {\n    _type,\n    _key,\n    title,\n    richSubtitle,\n    testimonials[]->{\n      username,\n      richText,\n    },\n    \n  buttons[]{\n    text,\n    variant,\n    _key,\n    _type,\n    \"openInNewTab\": url.openInNewTab,\n    \"anchor\": url.anchor->idItem,\n    \"href\": select(\n      url.type == \"internal\" => url.internal->slug.current,\n      url.type == \"external\" => url.external,\n      url.href\n    ),\n  }\n,\n  }\n,\n      \n  _type == \"interiorPageHero\" => {\n    _type,\n    _key,\n    title,\n    richSubtitle,\n    richText,\n    \n  image{\n    ...,\n    \"alt\": imageDescription,\n    \"blurData\": asset->metadata.lqip,\n    \"dominantColor\": asset->metadata.palette.dominant.background,\n  }\n,\n  }\n,\n    },\n    meta_title,\n    meta_description,\n    noindex,\n    ogImage {\n      asset->{\n        _id,\n        url,\n        metadata {\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n    }\n  }\n": PAGE_QUERYResult;
    "*[_type == \"page\" && defined(slug) && language == $language]{slug}": PAGES_SLUGS_QUERYResult;
  }
}
